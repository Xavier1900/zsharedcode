#summary JQueryElement 数据绑定
#labels Phase-Implementation
<font face="microsoft yahei">
=== 简介/目录 ===
 本文将系统讲解 Repeater 控件的功能以及使用过程中的注意事项和技巧, 目录如下:

  * 准备
  * 主要功能
    * 绑定字段
    * 绑定属性
    * 设置分页
    * 设置字段
    * 请求/返回数据的格式
      * 填充/搜索
      * 更新
      * 删除
      * 新建
    * 行状态说明
    * 设置模板
      * ItemTemplate
      * UpdatedItemTemplate/InsertedItemTemplate
      * RemovedItemTemplate
      * EditItemTemplate
      * FilterTemplate/NewItemTemplate
      * HeaderTemplate/FooterTemplate/EmptyTemplate
    * 特殊绑定
      * je-id
      * je-<javascript 事件名>
      * je-class

=== 准备 ===
 请确保已经在 [Download 下载资源] 中下载 JQueryElement 最新的版本.

 请使用指令引用如下的命名空间:
{{{
<%@ Register Assembly="zoyobar.shared.panzer.JQueryElement"
	Namespace="zoyobar.shared.panzer.ui.jqueryui"
	TagPrefix="je" %>
<%@ Register Assembly="zoyobar.shared.panzer.JQueryElement"
	Namespace="zoyobar.shared.panzer.web.jqueryui"
	TagPrefix="je" %>
}}}

 除了命名空间, 还需要引用 jQueryUI 的脚本和样式, 可以在 [http://jqueryui.com jqueryui.com] 下载, 例如:
{{{
<link type="text/css" rel="stylesheet" href="[样式路径]/jquery-ui-1.8.15.custom.css" />
<script type="text/javascript" src="[脚本路径]/jquery-1.6.2.min.js"></script>
<script type="text/javascript" src="[脚本路径]/jquery-ui-1.8.15.custom.min.js"></script>
<script type="text/javascript" src="[脚本路径]/jquery.ui.datepicker-zh-CN.js"></script>
}}}

=== 主要功能 ===

 ==== <font color="green">绑定字段</font> ====
 在行模板中, 可以使用 *#{<字段名>}* 的形式来绑定字段, 比如:
{{{
<ItemTemplate>
	<span>#{id}</span>
	<span>#{realname}</span>
	<span>#{age}</span>
</ItemTemplate>
}}}
 字段也可以被绑定在标签的属性中, 比如:
{{{
<ItemTemplate>
	<span>#{id}</span>
	<span title="#{realname}">#{realname}</span>
	<span>#{age}</span>
</ItemTemplate>
}}}

 ==== <font color="green">绑定属性</font> ====
 在所有的模板中都可以绑定属性, 语法为 *@{<属性名>}*, 比如:
{{{
<FooterTemplate>
	第 @{pageindex}/@{pagecount} 页, @{itemcount} 条
</FooterTemplate>
}}}

 ==== <font color="green">设置分页</font> ====
 通过 Repeater 的 PageSize 属性设置每页包含多少条数据, PageIndex 属性设置初始的页码, PageIndex 默认为 1.

 ==== <font color="green">设置字段</font> ====
 Repeater 的 Field 属性表示参与绑定的字段, 其形式为一个 javascript 字符串数组, 比如: `['id', 'realname', 'age']`, 如果不设置 Field 属性, 则由第一次填充的数据来确定, 但这将导致在没有数据的情况下无法新建.

 FilterField 表示用于搜索的字段, 也是一个 javascript 字符串数组. FilterFieldDefault 为搜索字段的值为 null 或者 '' 时的默认值, 示例: `['', '', 0]`.

 SortField 表示参与排序的字段, 比如: `['id']`.

 ==== <font color="green">请求/返回数据的格式</font> ====

 ===== 填充/搜索 =====
 对于填充或者搜索操作, 以 WebService 为例, 服务端将接收如下参数, pageindex 页码, pagesize 每页中包含数据条数, 还可以接收与字段同名的参数或者通过 Parameter 增加的参数作为搜索条件, 或者接收形式为 *<字段名称>*{{{_}}}*order* 的用于排序的字段参数, 排序参数有三种值, "" 表示没有排序, "asc" 升序, "desc" 降序:
{{{
[WebMethod ( )]
public static object <方法名称> ( int pageindex, int pagesize
	[, <类型n, 如: string> <用于搜索的字段或条件名称n>]
	[, string <用于排序的字段名称m>_order] )
{
}

[WebMethod ( )]
public static object Fill ( int pageindex, int pagesize
	, string realname, int age
	, string id_order )
{
}
}}}
 服务器还应返回如下格式的 json 数据作为填充数据, 其中 __success 默认为 true, itemcount 可以省略, 但将无法计算 pagecount 页码.
{{{
{
	"__success": <表示是否成功的布尔值, 为 true 或者 false>,
	"rows": <当前页包含行数据的 javascript 数组>,
	"itemcount": <总行数>
}

{
	"__success": true,
	"rows":
	[
		{ "id": 1, "realname": "jack", "age": 20 },
		{ "id": 2, "realname": "tom", "age": 21 }
	],
	"itemcount": 120
}
}}}
 在 .NET 4.0 中可以使用匿名类型来返回 json, 比如:
{{{
[WebMethod ( )]
public static object Fill ( /* 参数 */ )
{
	// ...
	List<object> students = new List<object> ( );
	students.Add ( new {
		id = 1,
		realname = "jack",
		age = 20
		} );
	// ...
	return new { __success = true, rows = students.ToArray ( ), itemcount = 120 };
}
}}}

 ===== 更新 =====
 对于更新操作, 以 WebService 为例, 服务端将接收与更新的字段同名的参数:
{{{
[WebMethod ( )]
public static object <方法名称> ( <类型, 如: string> <用于更新的字段名称>
	[, <类型n, 如: string> <用于更新的字段名称n>])
{
}

[WebMethod ( )]
public static object Update ( int id
	, string realname, int age )
{
}
}}}
 服务器可以返回如下格式的 json 作为更新后的消息, 其中 __success 默认为 true, row 可以省略, 如果修改从客户端传递来的参数, 比如将小写的姓名改成大写, 那么可以用 row 来返回修改的字段.
{{{
{
	"__success": <表示是否成功的布尔值, 为 true 或者 false>,
	"row": <更新后的行, 不必包含所有字段>
}

{
	"__success": true,
	"row": { "realname": "JACK" }
}
}}}
 在 .NET 4.0 中可以使用匿名类型来返回 json, 比如:
{{{
[WebMethod ( )]
public static object Update ( /* 参数 */ )
{
	// ..., row 可以省略
	return new { __success = true,
		row = new { realname = "JACK" }
		};
}
}}}

 ===== 删除 =====
 对于删除操作, 以 WebService 为例, 服务端将接收用于删除的字段作为参数:
{{{
[WebMethod ( )]
public static object <方法名称> ( <类型, 如: string> <用于删除的字段名称>
	[, <类型n, 如: string> <用于删除的字段名称n>])
{
}

[WebMethod ( )]
public static object Remove ( int id )
{
}
}}}
 服务器可以返回如下格式的 json 作为删除后的消息, 其中 __success 默认为 true.
{{{
{
	"__success": <表示是否成功的布尔值, 为 true 或者 false>
}

{
	"__success": true
}
}}}
 在 .NET 4.0 中可以使用匿名类型来返回 json, 比如:
{{{
[WebMethod ( )]
public static object Remove ( /* 参数 */ )
{
	// ..., row 可以省略
	return new { __success = true };
}
}}}

 ===== 新建 =====
 对于新建操作, 以 WebService 为例, 服务端将接收与新建的字段同名的参数:
{{{
[WebMethod ( )]
public static object <方法名称> ( <类型, 如: string> <用于新建的字段名称>
	[, <类型n, 如: string> <用于新建的字段名称n>])
{
}

[WebMethod ( )]
public static object Insert ( string realname
	, int age )
{
}
}}}
 服务器可以返回如下格式的 json 作为新建后的消息, 其中 __success 默认为 true.
{{{
{
	"__success": <表示是否成功的布尔值, 为 true 或者 false>,
	"row": <新建后的行>
}

{
	"__success": true,
	"row": { "id":10, "realname": "lili", "age": 12 }
}
}}}
 在 .NET 4.0 中可以使用匿名类型来返回 json, 比如:
{{{
[WebMethod ( )]
public static object Insert ( /* 参数 */ )
{
	// ..., row 可以省略
	return new { __success = true,
		row = new { id = 10, realname = "lili", age = 12 }
		};
}
}}}

 ==== <font color="green">行状态说明</font> ====
 在客户端的 javascript 脚本中, 行状态有 4 种, 分别是 unchanged 未改变, updated 更新过, inserted 新建后的行, removed 删除后的行.

 ==== <font color="green">设置模板</font> ====
 在 Repeater 的各种模板中, 可以设置 Repeater 最终显示的 html 代码, 这些 html 代码应该是完整的, 合法的, *并且不要直接使用单引号, 可以对单引号转义,* 否则可能导致最终显示的不正常.

 ===== ItemTemplate =====
 ItemTemplate 为行模板中的一种, 可以显示处于 unchanged 状态的行, 如果没有设置 UpdatedItemTemplate 或者 InsertedItemTemplate, 那么 updated, inserted 状态的行也显示在 ItemTemplate 中, 示例:
{{{
<ItemTemplate>
	<tr>
		<td>
			#{id}
		</td>
		<td>
			#{realname}
		</td>
		<td>
			#{age}
		</td>
		<td>
			/* 编辑和删除按钮 */
		</td>
	</tr>
</ItemTemplate>
}}}

 ===== UpdatedItemTemplate/InsertedItemTemplate =====
 与 ItemTemplate 不同的是, UpdatedItemTemplate 和 InsertedItemTemplate 分别用于显示状态为 updated 和 inserted 的行, 主要用于采用不同样式来显示不同状态的行, 但也可以使用更简便的 je-class 来完成同样的效果, 示例:
{{{
<UpdatedItemTemplate>
	<tr style="font-weight: bold;">
		<td>
			#{id}
		</td>
		<td>
			#{realname}
		</td>
		<td>
			#{age}
		</td>
	</tr>
</UpdatedItemTemplate>

<InsertedItemTemplate>
	<tr style="color: green;">
		<td>
			#{id}
		</td>
		<td>
			#{realname}
		</td>
		<td>
			#{age}
		</td>
	</tr>
</InsertedItemTemplate>
}}}

 ===== RemovedItemTemplate =====
 默认情况下 removed 状态的行是不显示的, 除非设置了 RemovedItemTemplate, 示例:
{{{
<RemovedItemTemplate>
	<tr style="color: red;">
		<td>
			#{id}
		</td>
		<td>
			#{realname}
		</td>
		<td>
			#{age}
		</td>
		<td>
			已经删除
		</td>
	</tr>
</RemovedItemTemplate>
}}}

 ===== EditItemTemplate =====
 EditItemTemplate 是用来编辑行的模板, 其中会包含一些文本框之类的元素, 如果需要在更新中获取字段的值, 还需要设置 *je-id="<字段名>"*, 示例:
{{{
<EditItemTemplate>
	<tr>
		<td>
			#{id}
		</td>
		<td>
			<input type="text" je-id="realname" value="#{realname}" />
		</td>
		<td>
			<input type="text" je-id="age" value="#{age}" />
		</td>
		<td>
			/* 取消和保存按钮 */
		</td>
	</tr>
</EditItemTemplate>
}}}

 ===== FilterTemplate/NewItemTemplate =====
 FilterTemplate 和 NewItemTemplate 有些相似之处, 同样包含一些文本框, 需要使用 je-id 来绑定 id, 示例:
{{{
<FilterTemplate>
	<tr>
		<td>
			<input type="text" je-id="realname" value="#{realname}" />
		</td>
		<td>
			<input type="text" je-id="age" value="#{age}" />
		</td>
		<td>
			/* 搜索按钮 */
		</td>
	</tr>
</FilterTemplate>

<NewItemTemplate>
	<tr>
		<td>
			<input type="text" je-id="realname" value="#{realname}" />
		</td>
		<td>
			<input type="text" je-id="age" value="#{age}" />
		</td>
		<td>
			/* 新建按钮 */
		</td>
	</tr>
</NewItemTemplate>
}}}

 ===== HeaderTemplate/FooterTemplate/EmptyTemplate =====
 HeaderTemplate 表示头模板, FooterTemplate 表示尾模板, EmptyTemplate 表示在没有数据时的模板.

 ==== <font color="green">特殊绑定</font> ====
 
 ===== je-id =====
 使用 *je-id="<字段名>"* 可以绑定特殊的 id, 可以使用在行模板或者 FilterTemplate, NewItemTemplate 中的 input 元素中.

 在 EditItemTemplate 中, 被指定 je-id 的 input 将包含此字段的新值.

 在 FilterTemplate 中, 指定 je-id 的 input 包含了用于搜索的字段的值, 这些字段应该包含在 FilterField 属性中.

 在 NewItemTemplate 中, 指定 je-id 的 input 包含了用于新建的字段的值.

 ===== je-<javascript 事件名> =====
 使用 *je-<javascript 事件名>="<行为名>"* 可以为事件绑定特殊的操作. 可以使用在各个模板中, 常用的行为有: beginedit 开始编辑, endedit 取消编辑, update 保存更新, remove 删除, toggleselect 切换选中状态, insert 新建, filter 搜索, togglesort 切换排序. 其中, 前 5 者只能用在行模板中, insert 可用在 NewItemTemplate 中, filter 可用在 FilterTemplate 中, togglesort 可用在 HeaderTemplate 中, 示例:
{{{
<ItemTemplate>
	<tr>
		<td>
			#{id}
		</td>
		<td>
			#{realname}
		</td>
		<td>
			#{age}
		</td>
		<td>
			<span je-onclick="beginedit">编辑</span>
			<span je-onclick="remove">删除</span>
		</td>
	</tr>
</ItemTemplate>

<EditItemTemplate>
	<tr>
		<td>
			#{id}
		</td>
		<td>
			<input type="text" je-id="realname" value="#{realname}" class="textbox" />
		</td>
		<td>
			<input type="text" je-id="age" value="#{age}" class="textbox" />
		</td>
		<td>
			<span je-onclick="endedit">取消</span>
			<span je-onclick="update">保存</span>
		</td>
	</tr>
</EditItemTemplate>
}}}
 需要说明的是, togglesort 还需要指定一个参数, 表示切换排序的字段, 这个字段已经在 SortField 中设置, 比如: je-onclick="togglesort,realname".

 ===== je-class =====
 使用 *je-class="<样式>"* 可以为事件绑定特殊的样式. 可以在各个模板中使用 je-class, 常用的样式有: {header} 表示 ui-widget-header, {active} 表示 ui-state-active, {highlight} 表示 ui-state-highlight, {disabled} 表示 ui-state-disabled, {error} 表示 ui-state-error, {default} 表示 ui-state-default, {state} 表示行状态, {sort} 表示排序状态, 示例:
{{{
<HeaderTemplate>
	<thead je-class="{header}">
		<tr>
			<td je-onclick="togglesort,id">
<span je-class="{sort,id,,ui-icon ui-icon-arrow-1-n icon,ui-icon ui-icon-arrow-1-s icon}">
</span>
				序号
			</td>
			/* ... */
		</tr>
	</thead>
</HeaderTemplate>

<ItemTemplate>
	<tr je-class="{state}-item">
		/* ... */
	</tr>
</ItemTemplate>
}}}

</font>