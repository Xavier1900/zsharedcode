#summary JQueryElement 数据绑定
#labels Phase-Implementation
<font face="microsoft yahei">
=== 简介 ===
 本文将系统讲解 Repeater 控件的功能以及使用过程中的注意事项和技巧.

=== 准备 ===
 请确保已经在 [Download 下载资源] 中下载 JQueryElement 最新的版本.

 请使用指令引用如下的命名空间:
{{{
<%@ Register Assembly="zoyobar.shared.panzer.JQueryElement"
	Namespace="zoyobar.shared.panzer.ui.jqueryui"
	TagPrefix="je" %>
<%@ Register Assembly="zoyobar.shared.panzer.JQueryElement"
	Namespace="zoyobar.shared.panzer.web.jqueryui"
	TagPrefix="je" %>
}}}

 除了命名空间, 还需要引用 jQueryUI 的脚本和样式, 可以在 [http://jqueryui.com jqueryui.com] 下载, 例如:
{{{
<link type="text/css" rel="stylesheet" href="[样式路径]/jquery-ui-1.8.15.custom.css" />
<script type="text/javascript" src="[脚本路径]/jquery-1.6.2.min.js"></script>
<script type="text/javascript" src="[脚本路径]/jquery-ui-1.8.15.custom.min.js"></script>
<script type="text/javascript" src="[脚本路径]/jquery.ui.datepicker-zh-CN.js"></script>
}}}

=== 主要功能 ===

==== 绑定字段 ====
 在行模板中, 可以使用 *#{<字段名>}* 的形式来绑定字段, 比如:
{{{
<ItemTemplate>
	<span>#{id}</span>
	<span>#{realname}</span>
	<span>#{age}</span>
</ItemTemplate>
}}}
 字段也可以被绑定在标签的属性中, 比如:
{{{
<EditItemTemplate>
	<span>#{id}</span>
	<input type="text" value="#{realname}" />
	<input type="text" value="#{age}" />
</EditItemTemplate>
}}}

==== 绑定属性 ====
 在所有的模板中都可以绑定属性, 语法为 *@{<属性名>}*, 比如:
{{{
<FooterTemplate>
	第 @{pageindex}/@{pagecount} 页, @{itemcount} 条
</FooterTemplate>
}}}

==== 设置分页 ====
 通过 Repeater 的 PageSize 属性设置每页包含多少条数据, PageIndex 属性设置初始的页码, PageIndex 默认为 1.

==== 请求/返回数据的格式 ====

===== 填充/搜索 =====
 对于填充或者搜索操作, 以 WebService 为例, 服务端将接收如下参数, pageindex 页码, pagesize 每页中包含数据条数, 还可以接收与字段同名的参数或者通过 Parameter 增加的参数作为搜索条件, 或者接收形式为 *<字段名称>*{{{_}}}*order* 的用于排序的字段参数, 排序参数有三种值, "" 表示没有排序, "asc" 升序, "desc" 降序:
{{{
[WebMethod ( )]
public static object <方法名称> ( int pageindex, int pagesize
	[, <类型n, 如: string> <用于搜索的字段或条件名称n>]
	[, string <用于排序的字段名称m>_order] )
{
}

[WebMethod ( )]
public static object Fill ( int pageindex, int pagesize
	, string realname, int age
	, string id_order )
{
}
}}}
 服务器还应返回如下格式的 json 数据作为填充数据, 其中 __success 默认为 true, itemcount 可以省略, 但将无法计算 pagecount 页码.
{{{
{
	"__success": <表示是否成功的布尔值, 为 true 或者 false>,
	"rows": <当前页包含行数据的 javascript 数组>,
	"itemcount": <总行数>
}

{
	"__success": true,
	"rows":
	[
		{ "id": 1, "realname": "jack", "age": 20 },
		{ "id": 2, "realname": "tom", "age": 21 }
	],
	"itemcount": 120
}
}}}
 在 .NET 4.0 中可以使用匿名类型来返回 json, 比如:
{{{
[WebMethod ( )]
public static object Fill ( /* 参数 */ )
{
	// ...
	List<object> students = new List<object> ( );
	students.Add ( new {
		id = 1,
		realname = "jack",
		age = 20
		} );
	// ...
	return new { __success = true, rows = students.ToArray ( ), itemcount = 120 };
}
}}}

===== 更新 =====
 对于更新操作, 以 WebService 为例, 服务端将接收与更新的字段同名的参数:
{{{
[WebMethod ( )]
public static object <方法名称> ( <类型, 如: string> <用于更新的字段名称>
	[, <类型n, 如: string> <用于更新的字段名称n>])
{
}

[WebMethod ( )]
public static object Update ( int id
	, string realname, int age, string birthday )
{
}
}}}
 服务器可以返回如下格式的 json 作为更新后的消息, 其中 __success 默认为 true, row 可以省略, 如果修改从客户端传递来的参数, 比如将小写的姓名改成大写, 那么可以用 row 来返回修改的字段.
{{{
{
	"__success": <表示是否成功的布尔值, 为 true 或者 false>,
	"row": <更新后的行, 不必包含所有字段>
}

{
	"__success": true,
	"row": { "realname": "JACK" }
}
}}}
 在 .NET 4.0 中可以使用匿名类型来返回 json, 比如:
{{{
[WebMethod ( )]
public static object Update ( /* 参数 */ )
{
	// ..., row 可以省略
	return new { __success = true,
		row = new { realname = "JACK" }
		};
}
}}}

===== 删除 =====
 对于删除操作, 以 WebService 为例, 服务端将接收用于删除的字段作为参数:
{{{
[WebMethod ( )]
public static object <方法名称> ( <类型, 如: string> <用于删除的字段名称>
	[, <类型n, 如: string> <用于删除的字段名称n>])
{
}

[WebMethod ( )]
public static object Remove ( int id )
{
}
}}}
 服务器可以返回如下格式的 json 作为删除后的消息, 其中 __success 默认为 true.
{{{
{
	"__success": <表示是否成功的布尔值, 为 true 或者 false>
}

{
	"__success": true
}
}}}
 在 .NET 4.0 中可以使用匿名类型来返回 json, 比如:
{{{
[WebMethod ( )]
public static object Remove ( /* 参数 */ )
{
	// ..., row 可以省略
	return new { __success = true };
}
}}}

==== 设置模板 ====
 通过相关的 Template, 可以为 Repeater 设置每行数据, 开始和结束的模板. EditItemTemplate 表示行处于编辑状态时的模板, RemovedItemTemplate 表示删除状态的行的模板, 如果没有设置则不会显示删除状态的行. NewItemTemplate 中是新建行的模板.

==== 根据行状态设置样式 ====
 在模板中, 可以使用 {{{<tr je-class="{state}-item">}}} 这样的语法, je-class 在最后的代码中将替换为 class, {state} 将被替换为行的状态, 为 unchanged, inserted, updated 中的一种.

==== 在模板中绑定字段和属性 ====
 在模板中使用 ```#{<字段名>}``` 的语法绑定字段, 使用 ```@{<属性名>}``` 的语法绑定属性.

==== 在模板中绑定标签属性 ====
 在模板中使用 ```je-<标签属性>="绑定值"``` 的语法绑定字段, 比如在 ItemTemplate 中, 使用 {{{je-id="name"}}}, 将根据行的索引生成一个关于 name 字段的索引. 也可以绑定事件, 比如: {{{je-onclick="update"}}}, 则将生成执行更新的 onclick 事件.

</font>