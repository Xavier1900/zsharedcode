#summary Return JSON In Different .NET Version
<font face="Segoe UI, Verdana, Tahoma, Arial, sans-serif">
=== Introduction/Catalog ===
 Please *download the sample code* at the section JQueryElement Demo Download of [Download Downloads], the directory is /returnjson/Default.aspx.

 Video demo: [http://www.tudou.com/programs/view/rHCYHX9cmcI/ www.tudou.com/programs/view/rHCYHX9cmcI/]
 
 This article explains how to use a generic handler ashx and WebService to return JSON to the javascript:

  * Prepare
  * Generic Handler/ashx
  * WebService/asmx

===Prepare===
 If you want to use ashx or asmx to return JSON, you *need to reference Assembly System.Web.Extensions.dll*, .NET 3.5, 4 has tacitly contain. For .NET 2, 3, you need to install ASP. NET 2.0 AJAX, you can download it at [http://www.microsoft.com/download/en/details.aspx?displaylang=en&id=883 www.microsoft.com/download/en/details.aspx?displaylang=en&id=883].

=== Generic Handler/ashx ===
 Uses generic handler returns JSON are similar in different .NET version, consider the following code in handler.ashx:
{{{
<%@ WebHandler Language="C#" Class="handler" %>

using System;
using System.Web;
using System.Web.Script.Serialization;
using System.Collections.Generic;

public class handler : IHttpHandler
{

	public void ProcessRequest(HttpContext context)
	{
		context.Response.ContentType = "text/javascript";
		context.Response.Cache.SetNoStore ( );

		string name = context.Request["name"];

		SortedDictionary<string, object> values = new SortedDictionary<string, object>();
		values.Add("message",
			string.IsNullOrEmpty(name) ? "Anonym" :
			string.Format("Hi {0}, {1}", name, DateTime.Now));

		context.Response.Write(new JavaScriptSerializer().Serialize(values));
	}

	public bool IsReusable
	{
		get { return false; }
	}

}
}}}
 In the example above, through the Serialize method of the class JavaScriptSerializer, will convert a object into a JSON string. Converted object is SortedDictionary, it'll generate `{ "message": "Hi x, 20xx-xx-xx xx:xx:xx" }`. If you need to return an array, you can define a List to convert. You can also use `context.Response.Cache.SetNoStore ( );` to make sure that every time the browser requests ashx and revisit ashx, instead of using the cache.

 If you use jQuery, you can use the following method to receive JSON:
{{{
function(data){
	alert(data.message);
}
}}}

=== WebService/asmx ===
 In different .NET versions, access the WebService and return JSON through javascript is slightly different. First, you can use different Web.config files.

 ===== .NET 2.0, 3.0 Web.config =====
{{{
<?xml version="1.0"?>
<configuration>
	<system.web>
		<compilation debug="true">
			<assemblies>
				<add
assembly="System.Web.Extensions, Version=1.0.61025.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
			</assemblies>
		</compilation>
		<pages/>
		<httpHandlers>
			<remove verb="*" path="*.asmx"/>
			<add verb="*" path="*.asmx"
				type="System.Web.Script.Services.ScriptHandlerFactory"
				 validate="false"/>
		</httpHandlers>
	</system.web>
</configuration>
}}}

 ===== .NET 3.5 Web.config =====
{{{
<?xml version="1.0"?>
<configuration>
	<configSections>
		<sectionGroup name="system.web.extensions" type="System.Web.Configuration.SystemWebExtensionsSectionGroup, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35">
			<sectionGroup name="scripting" type="System.Web.Configuration.ScriptingSectionGroup, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35">
				<section name="scriptResourceHandler" type="System.Web.Configuration.ScriptingScriptResourceHandlerSection, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" requirePermission="false" allowDefinition="MachineToApplication"/>
				<sectionGroup name="webServices" type="System.Web.Configuration.ScriptingWebServicesSectionGroup, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35">
					<section name="jsonSerialization" type="System.Web.Configuration.ScriptingJsonSerializationSection, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" requirePermission="false" allowDefinition="Everywhere"/>
					<section name="profileService" type="System.Web.Configuration.ScriptingProfileServiceSection, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" requirePermission="false" allowDefinition="MachineToApplication"/>
					<section name="authenticationService" type="System.Web.Configuration.ScriptingAuthenticationServiceSection, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" requirePermission="false" allowDefinition="MachineToApplication"/>
					<section name="roleService" type="System.Web.Configuration.ScriptingRoleServiceSection, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" requirePermission="false" allowDefinition="MachineToApplication"/>
				</sectionGroup>
			</sectionGroup>
		</sectionGroup>
	</configSections>
	<system.web>
		<compilation debug="true">
			<assemblies>
				<add assembly="System.Core, Version=3.5.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>
				<add assembly="System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
				<add assembly="System.Xml.Linq, Version=3.5.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>
				<add assembly="System.Data.DataSetExtensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=B77A5C561934E089"/>
			</assemblies>
		</compilation>
		<pages>
			<controls>
				<add tagPrefix="asp" namespace="System.Web.UI" assembly="System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
				<add tagPrefix="asp" namespace="System.Web.UI.WebControls" assembly="System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
			</controls>
		</pages>
		<httpHandlers>
			<remove verb="*" path="*.asmx"/>
			<add verb="*" path="*.asmx" type="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" validate="false"/>
			<add verb="*" path="*_AppService.axd" validate="false" type="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
			<add verb="GET,HEAD" path="ScriptResource.axd" validate="false" type="System.Web.Handlers.ScriptResourceHandler, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
		</httpHandlers>
		<httpModules>
			<add name="ScriptModule" type="System.Web.Handlers.ScriptModule, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
		</httpModules>
	</system.web>
	<system.codedom>
		<compilers>
			<compiler language="c#;cs;csharp" extension=".cs" type="Microsoft.CSharp.CSharpCodeProvider, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" warningLevel="4">
				<providerOption name="CompilerVersion" value="v3.5"/>
				<providerOption name="WarnAsError" value="false"/>
			</compiler>
			<compiler language="vb;vbs;visualbasic;vbscript" extension=".vb" type="Microsoft.VisualBasic.VBCodeProvider, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" warningLevel="4">
				<providerOption name="CompilerVersion" value="v3.5"/>
				<providerOption name="OptionInfer" value="true"/>
				<providerOption name="WarnAsError" value="false"/>
			</compiler>
		</compilers>
	</system.codedom>
	<system.webServer>
		<validation validateIntegratedModeConfiguration="false"/>
		<modules>
			<remove name="ScriptModule"/>
			<add name="ScriptModule" preCondition="managedHandler" type="System.Web.Handlers.ScriptModule, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
		</modules>
		<handlers>
			<remove name="WebServiceHandlerFactory-Integrated"/>
			<remove name="ScriptHandlerFactory"/>
			<remove name="ScriptHandlerFactoryAppServices"/>
			<remove name="ScriptResource"/>
			<add name="ScriptHandlerFactory" verb="*" path="*.asmx" preCondition="integratedMode" type="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
			<add name="ScriptHandlerFactoryAppServices" verb="*" path="*_AppService.axd" preCondition="integratedMode" type="System.Web.Script.Services.ScriptHandlerFactory, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
			<add name="ScriptResource" verb="GET,HEAD" path="ScriptResource.axd" preCondition="integratedMode" type="System.Web.Handlers.ScriptResourceHandler, System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35"/>
		</handlers>
	</system.webServer>
	<runtime>
		<assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1" appliesTo="v2.0.50727">
			<dependentAssembly>
				<assemblyIdentity name="System.Web.Extensions" publicKeyToken="31bf3856ad364e35"/>
				<bindingRedirect oldVersion="1.0.0.0-1.1.0.0" newVersion="3.5.0.0"/>
			</dependentAssembly>
			<dependentAssembly>
				<assemblyIdentity name="System.Web.Extensions.Design" publicKeyToken="31bf3856ad364e35"/>
				<bindingRedirect oldVersion="1.0.0.0-1.1.0.0" newVersion="3.5.0.0"/>
			</dependentAssembly>
		</assemblyBinding>
	</runtime>
</configuration>
}}}

 ===== .NET 4.0 Web.config =====
{{{
<?xml version="1.0"?>
<configuration>
	<system.web>
		<compilation debug="true" targetFramework="4.0">
		</compilation>
		<pages controlRenderingCompatibilityVersion="3.5" clientIDMode="AutoID"/></system.web>
</configuration>
}}}

 Here is the WebService.asmx/WebService.cs code:
{{{
<%@ WebService Language="C#" CodeBehind="~/App_Code/webservice.cs" Class="webservice" %>
}}}
{{{
using System;
using System.Web;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Web.Script.Services;
using System.Web.Script.Serialization;
using System.Collections.Generic;

[WebService ( Namespace = "http://tempuri.org/" )]
[WebServiceBinding ( ConformsTo = WsiProfiles.BasicProfile1_1 )]
[ScriptService]
public class webservice : System.Web.Services.WebService
{

	[WebMethod]
	[ScriptMethod]
	public SortedDictionary<string, object> Save ( string name )
	{
		this.Context.Response.Cache.SetNoStore ( );

		SortedDictionary<string, object> values = new SortedDictionary<string, object> ( );
		values.Add ( "message",
			string.IsNullOrEmpty ( name ) ? "Anonym" :
			string.Format ( "Hi {0}, {1}", name, DateTime.Now ) );

		return values;
	}

}
}}}
 Add ScriptService attribute to the class and add ScriptMethod attribute to the method allows javascript to call these methods. Here you don't have to use the JavaScriptSerializer to convert object into a JSON string, but directly return it. In the above code returns a SortedDictionary, the JSON in .NET 2 and 3 will be similar to  `{ "message": "Hi x, 20xx-xx-xx xx:xx:xx" }`, and in .NET 3.5, 4 are `{ "d": { "message": "Hi x, 20xx-xx-xx xx:xx:xx" } }`, so you can use the following method in jQuery to accept JSON:
{{{
function(data){
	alert(data.message);
}

function(data){
	alert(data.d.message);
}
}}}
 If you write javascript method in the property, you can use *`-:data`* to represent JSON, different versions will be automatically replaced with the data or data.d:
{{{
<je:Button ID="cmdWNet4" runat="server" Label="all version">
	<ClickAsync Url="webservice.asmx" MethodName="Save" Success="
	function(data){
		alert(-:data.message);
	}
	">
	</ClickAsync>
</je:Button>
}}}

=== Related Content ===
 [AjaxDataType Ajax And Server Data Type Conversions]

 [JEParameter Through Parameter Object Add Ajax Request Parameter]

=== Revision History ===
 2011-12-5: Modify the link of download.

 2011-12-9: Increase the description of -:data.

</font>
